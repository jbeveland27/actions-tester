name: Documentation

on:
  push:
    branches:
      - master
    paths:
      - "docs/**"
  repository_dispatch:
    types: [docs]
  gollum:

env:
  THIRD_PARTY_GIT_AUTHOR_EMAIL: opensource+bot@newrelic.com
  THIRD_PARTY_GIT_AUTHOR_NAME: nr-opensource-bot

jobs:
  log-context:
    runs-on: [ubuntu-latest]
    if: 1 == 1 # make false to skip
    steps:
      # Dump all contexts
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
  # Syncs changes made to the Wiki through the GitHub UI to the docs directory
  # Modified from: https://github.com/SwiftDocOrg/github-wiki-publish-action/blob/v1/entrypoint.sh
  job-sync-wiki-to-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'gollum'
    env:
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.NEWRELIC_BOT_TOKEN }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.NEWRELIC_BOT_TOKEN }} # allows us to push back to repo
      - name: Sync wiki to docs
        run: |
          function debug() {
              echo "::debug::$1"
          }

          function error() {
              echo "::error::$1"
          }

          function add_mask() {
              echo "::add-mask::$1"
          }

          # check that vars are set
          if [ -z "$GITHUB_ACTOR" ]; then
              error "GITHUB_ACTOR environment variable is not set"
              exit 1
          fi

          if [ -z "$GITHUB_REPOSITORY" ]; then
              error "GITHUB_REPOSITORY environment variable is not set"
              exit 1
          fi

          if [ -z "$GH_PERSONAL_ACCESS_TOKEN" ]; then
              error "GH_PERSONAL_ACCESS_TOKEN environment variable is not set"
              exit 1
          fi

          add_mask "${GH_PERSONAL_ACCESS_TOKEN}"

          if [ -z "${WIKI_COMMIT_MESSAGE:-}" ]; then
              debug "WIKI_COMMIT_MESSAGE not set, using default"
              WIKI_COMMIT_MESSAGE='chore(docs): Sync wiki to docs [skip ci]'
          fi

          GIT_REPOSITORY_URL="https://${GH_PERSONAL_ACCESS_TOKEN}@github.com/$GITHUB_REPOSITORY.wiki.git"

          debug "Checking out wiki repository"
          tmp_dir=$(mktemp -d -t ci-XXXXXXXXXX)
          (
              cd "$tmp_dir" || exit 1
              git init
              git config user.name "$GITHUB_ACTOR"
              git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
              git pull "$GIT_REPOSITORY_URL"
          )

          files_modified=$(diff -qr --exclude=.git docs/ $tmp_dir)
          if [ files_modifies != "" ]; then

            debug "Syncing contents of Wiki to repository dir docs"
            rsync -avzr --delete --exclude='.git/' "$tmp_dir/" "docs"

            debug "Committing and pushing changes"
            (
                git config user.name "${{ env.THIRD_PARTY_GIT_AUTHOR_NAME }}"
                git config user.email "${{ env.THIRD_PARTY_GIT_AUTHOR_EMAIL }}"
                
                # master could have been modified, so pull before pushing
                git pull --ff-only origin master
                
                git add .
                git commit -m "$WIKI_COMMIT_MESSAGE"
                git push origin master
            )
          else 
            echo "No file diff between wiki and docs. Exiting."
          fi 
          rm -rf "$tmp_dir"
          debug "Finished - Wiki synced to docs dir"
          exit 0

  job-sync-docs-to-wiki:
    runs-on: ubuntu-latest
    if: github.event_name != 'gollum'
    env:
      GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.NEWRELIC_BOT_TOKEN }}
    steps:
      # - uses: actions/checkout@v2
      # # Additional steps to generate documentation in "Documentation" directory
      # - name: Upload Documentation to Wiki
      #   uses: SwiftDocOrg/github-wiki-publish-action@v1
      #   with:
      #     path: "docs"
      #   env:
      #     GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.NEWRELIC_BOT_TOKEN }}
      - name: Checkout Repo
        uses: actions/checkout@v2
        # with:
        #   token: ${{ secrets.NEWRELIC_BOT_TOKEN }} # allows us to push back to repo
      - name: Sync docs to wiki
        run: |
          function debug() {
              echo "$1"
          }

          function error() {
              echo "::error::$1"
          }

          function add_mask() {
              echo "::add-mask::$1"
          }

          # check that vars are set
          if [ -z "$GITHUB_ACTOR" ]; then
              error "GITHUB_ACTOR environment variable is not set"
              exit 1
          fi

          if [ -z "$GITHUB_REPOSITORY" ]; then
              error "GITHUB_REPOSITORY environment variable is not set"
              exit 1
          fi

          if [ -z "$GH_PERSONAL_ACCESS_TOKEN" ]; then
              error "GH_PERSONAL_ACCESS_TOKEN environment variable is not set"
              exit 1
          fi

          add_mask "${GH_PERSONAL_ACCESS_TOKEN}"

          if [ -z "${WIKI_COMMIT_MESSAGE:-}" ]; then
              debug "WIKI_COMMIT_MESSAGE not set, using default"
              WIKI_COMMIT_MESSAGE='chore(docs): Sync docs to wiki [skip ci]'
          fi

          GIT_REPOSITORY_URL="https://${GH_PERSONAL_ACCESS_TOKEN}@github.com/$GITHUB_REPOSITORY.wiki.git"

          debug "Checking out wiki repository"
          tmp_dir=$(mktemp -d -t ci-XXXXXXXXXX)
          (
              cd "$tmp_dir" || exit 1
              git init
              git config user.name "${{ env.THIRD_PARTY_GIT_AUTHOR_NAME }}"
              git config user.email "${{ env.THIRD_PARTY_GIT_AUTHOR_EMAIL }}"
              git pull "$GIT_REPOSITORY_URL"
          )

          debug "diffing files"
          debug $tmp_dir
          diff -qr --exclude=.git docs $tmp_dir
          pwd
          files_modified=$(diff -qr --exclude=.git docs $tmp_dir &>/dev/null;)
          echo -n "files_modified:\n $files_modified"
          pwd
          ls -la
          if [ "$files_modified" != "" ]; then

            debug "Syncing contents of docs to wiki repository"
            rsync -avzr --delete --exclude='.git/' "docs/" "$tmp_dir"

            # debug "Committing and pushing changes"
            # (
            #     git config user.name "${{ env.THIRD_PARTY_GIT_AUTHOR_NAME }}"
            #     git config user.email "${{ env.THIRD_PARTY_GIT_AUTHOR_EMAIL }}"
                
            #     # master could have been modified, so pull before pushing
            #     git pull --ff-only origin master
                
            #     git add .
            #     git commit -m "$WIKI_COMMIT_MESSAGE"
            #     git push origin master
            # )

            debug "Committing and pushing changes"
            (
                cd "$tmp_dir" || exit 1
                git add .
                git commit -m "$WIKI_COMMIT_MESSAGE"
                git push --set-upstream "$GIT_REPOSITORY_URL" master
            )
          else 
            echo "No file diff between docs and wiki. Exiting."
          fi 
          rm -rf "$tmp_dir"
          debug "Finished - Wiki synced to docs dir"
          exit 0
